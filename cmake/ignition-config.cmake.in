# - Config file for the @PKG_NAME@ package.
#
# For finding and loading @PKG_NAME@ from your project, type:
#
# find_package(@PROJECT_NAME_LOWER@@PROJECT_MAJOR_VERSION@)
#
# It defines the following variables:
#
#  @PROJECT_NAME_LOWER@@PROJECT_MAJOR_VERSION@_FOUND       - System has @PKG_NAME@.
#  @PKG_NAME@_INCLUDE_DIRS - include directories for @PKG_NAME@ and its dependencies.
#  @PKG_NAME@_LIBRARY_DIRS - Paths in which the linker should search for libraries.
#  @PKG_NAME@_LIBRARIES    - Libraries to link against.
#  @PKG_NAME@_CXX_FLAGS    - Compiler flags for compiling C++ sources.
#  @PKG_NAME@_LDFLAGS      - Linker flags.

include (FindPkgConfig REQUIRED)

if (@PKG_NAME@_CONFIG_INCLUDED)
  return()
endif()
set(@PKG_NAME@_CONFIG_INCLUDED TRUE)

list(APPEND @PKG_NAME@_INCLUDE_DIRS
"@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_INCLUDEDIR@/ignition/@IGN_PROJECT_NAME@@PROJECT_MAJOR_VERSION@")

list(APPEND @PKG_NAME@_LIBRARY_DIRS
"@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@")

list(APPEND @PKG_NAME@_LIBRARIES "@PROJECT_NAME_LOWER@@PROJECT_MAJOR_VERSION@")

list(APPEND @PKG_NAME@_LDFLAGS -L"@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@")

# Visual Studio enables c++11 support by default
if (NOT MSVC)
  list(APPEND @PKG_NAME@_CXX_FLAGS -std=c++11)
endif()
if (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
  set(@PKG_NAME@_CXX_FLAGS "${@PKG_NAME@_CXX_FLAGS} -stdlib=libc++")
endif ()

# On Windows we need to link againt .lib files with no prefix.
if (WIN32)
  SET(CMAKE_FIND_LIBRARY_PREFIXES "")
  SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")
endif()

find_package(ignition-math2 REQUIRED)
